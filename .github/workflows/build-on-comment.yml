name: Build APK on PR Comment

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: read
  issues: write

jobs:
  build-apk:
    permissions:
      contents: read
      pull-requests: read
      issues: write
    if: >
      github.event.issue.pull_request != null &&
      (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )
    runs-on: ubuntu-latest
    env:
      BUILD_TASK: assembleRelease
      JAVA_VERSION: '21'
      JAVA_DISTRIBUTION: temurin

    steps:
      - name: Check for #buildapk trigger
        id: trigger
        run: |
          body="${{ github.event.comment.body }}"
          shopt -s nocasematch
          if [[ "$body" == *"#buildapk"* ]]; then
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_run=false" >> "$GITHUB_OUTPUT"
            echo "Comment does not request an APK build; skipping." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Gather PR info
        id: prinfo
        if: steps.trigger.outputs.should_run == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            core.setOutput('number', prNumber);
            core.setOutput('merge_ref', `refs/pull/${prNumber}/merge`);
            core.setOutput('head_ref', pr.data.head.ref);
            core.setOutput('head_repo', pr.data.head.repo.full_name);
            core.setOutput('head_sha', pr.data.head.sha);

      - name: Checkout PR merge ref
        id: checkout-merge
        if: steps.trigger.outputs.should_run == 'true'
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: ${{ steps.prinfo.outputs.merge_ref }}
          fetch-depth: 0
          persist-credentials: false

      - name: Checkout PR head ref (fallback)
        if: steps.trigger.outputs.should_run == 'true' && steps.checkout-merge.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.prinfo.outputs.head_repo }}
          ref: ${{ steps.prinfo.outputs.head_ref }}
          fetch-depth: 0
          persist-credentials: false

      - name: Set up JDK
        if: steps.trigger.outputs.should_run == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Gradle wrapper validation
        if: steps.trigger.outputs.should_run == 'true'
        uses: gradle/actions/wrapper-validation@v3

      - name: Record build start time
        if: steps.trigger.outputs.should_run == 'true'
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Build APK
        if: steps.trigger.outputs.should_run == 'true'
        run: ./gradlew $BUILD_TASK --stacktrace

      - name: Record build end time
        if: steps.trigger.outputs.should_run == 'true' && (success() || failure())
        run: echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV

      - name: Locate APK artifacts
        id: findapk
        if: steps.trigger.outputs.should_run == 'true'
        run: |
          set -euo pipefail
          if [ ! -d app/build/outputs/apk ]; then
            echo "No APK output directory found at app/build/outputs/apk" >&2
            exit 1
          fi
          mapfile -t apks < <(find app/build/outputs/apk -type f -name '*.apk' -print)
          if [ ${#apks[@]} -eq 0 ]; then
            echo "No APKs found under app/build/outputs/apk" >&2
            exit 1
          fi
          printf '%s\n' "${apks[@]}" | tee apklist.txt
          echo "count=${#apks[@]}" >> "$GITHUB_OUTPUT"

      - name: Upload APK artifact
        if: steps.trigger.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ steps.prinfo.outputs.number }}-${{ github.run_number }}
          if-no-files-found: error
          path: |
            app/build/outputs/apk/**/*.apk
            apklist.txt
          retention-days: 7

      - name: Compose artifact URL
        id: artifact_url
        if: steps.trigger.outputs.should_run == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const url = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}/artifacts`;
            core.setOutput('url', url);

      - name: Comment back (success)
        if: steps.trigger.outputs.should_run == 'true' && success()
        uses: actions/github-script@v7
        env:
          ARTIFACT_URL: ${{ steps.artifact_url.outputs.url }}
          APK_COUNT: ${{ steps.findapk.outputs.count }}
          BUILD_SHA: ${{ steps.prinfo.outputs.head_sha }}
        with:
          script: |
            const prNumber = context.payload.issue.number;
            const artifactName = `apk-${prNumber}-${process.env.GITHUB_RUN_NUMBER}`;
            const url = process.env.ARTIFACT_URL;
            const sha = (process.env.BUILD_SHA || process.env.GITHUB_SHA || '').substring(0, 7);
            const start = Number(process.env.BUILD_START || 0);
            const end = Number(process.env.BUILD_END || 0);
            let duration = 'unknown';
            if (start && end && end >= start) {
              const sec = end - start;
              const minutes = Math.floor(sec / 60);
              const seconds = sec % 60;
              duration = `${minutes}m ${seconds}s`;
            }
            const body = [
              `✅ **APK build complete** for PR #${prNumber}`,
              '',
              `**Artifact:** \`${artifactName}\``,
              `**Download:** ${url}`,
              `**Commit:** ${sha}`,
              `**Build duration:** ${duration}`,
              `**APK count:** ${process.env.APK_COUNT}`,
            ].join('\n');
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            } catch (error) {
              if (error.status === 403) {
                core.warning('Unable to post success comment due to insufficient token permissions.');
                await core.summary
                  .addHeading('APK build comment not posted')
                  .addRaw('The workflow could not add a comment back to the pull request because the provided token lacks `issues: write` access (HTTP 403).')
                  .write();
              } else {
                throw error;
              }
            }

      - name: Comment back (failure)
        if: steps.trigger.outputs.should_run == 'true' && failure()
        uses: actions/github-script@v7
        env:
          BUILD_SHA: ${{ steps.prinfo.outputs.head_sha }}
        with:
          script: |
            const prNumber = context.payload.issue.number;
            const sha = (process.env.BUILD_SHA || process.env.GITHUB_SHA || '').substring(0, 7);
            const body = [
              `❌ **APK build failed** for PR #${prNumber}`,
              '',
              `Commit: ${sha}`,
              `Logs: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            ].join('\n');
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            } catch (error) {
              if (error.status === 403) {
                core.warning('Unable to post failure comment due to insufficient token permissions.');
                await core.summary
                  .addHeading('APK build comment not posted')
                  .addRaw('The workflow could not add a failure comment back to the pull request because the provided token lacks `issues: write` access (HTTP 403).')
                  .write();
              } else {
                throw error;
              }
            }

  not-trusted:
    if: >
      github.event.issue.pull_request != null &&
      !(
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Log skip reason
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body || '';
            if (!body.toLowerCase().includes('#buildapk')) {
              core.info('Skipping build: comment does not request an APK build.');
              return;
            }
            core.info(`Skipping build: commenter is not trusted (association: ${context.payload.comment.author_association}).`);
